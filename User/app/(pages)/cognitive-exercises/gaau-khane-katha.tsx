import React, { useState } from "react";
import { View, Text, TouchableOpacity, StyleSheet, Alert } from "react-native";

export default function ProgressSharing() {
  // Array of questions with four options
  const riddles = [
    {
      id: "1",
      question: "‡§Ü‡§ó‡§ø ‡§¨‡§≤‡•á‡§ï‡•ã ‡§ß‡•Å‡§µ‡§æ‡§Å ‡§õ‡•à‡§®, ‡§ï‡•á ‡§π‡•ã‡§≤‡§æ?",
      options: ["‡§™‡§ø‡§™‡§≤‡§ï‡•ã ‡§¨‡•ã‡§ü", "‡§Ü‡§ó‡•ã", "‡§ß‡•Å‡§µ‡§æ‡§Å", "‡§ö‡•Å‡§∞‡§æ"],
      answer: "‡§™‡§ø‡§™‡§≤‡§ï‡•ã ‡§¨‡•ã‡§ü",
    },
    {
      id: "2",
      question: "‡§¶‡§∂ ‡§ñ‡•ã‡§≤‡•á ‡§™‡§∏‡•á, ‡§è‡§â‡§ü‡§æ ‡§™‡§æ‡§â ‡§®‡§∏‡•á, ‡§ï‡•á ‡§π‡•ã‡§≤‡§æ?",
      options: ["‡§Æ‡§∏‡§æ‡§≤", "‡§ö‡•Å‡§∞‡§æ", "‡§Æ‡§ï‡•à", "‡§ï‡§æ‡§ó"],
      answer: "‡§ö‡•Å‡§∞‡§æ",
    },
    {
      id: "3",
      question: "‡§õ‡•ã‡§∞‡§æ ‡§™‡§ø‡§ü‡•ç‡§¶‡§æ ‡§¨‡§æ‡§¨‡•Å ‡§∞‡•Å‡§®‡•ç‡§õ, ‡§ï‡•á ‡§π‡•ã‡§≤‡§æ?",
      options: ["‡§¢‡•ã‡§≤", "‡§Æ‡§æ‡§¶‡§≤", "‡§ü‡§æ‡§Å‡§ó‡§æ", "‡§ò‡§£‡•ç‡§ü‡•Ä"],
      answer: "‡§Æ‡§æ‡§¶‡§≤",
    },
    {
      id: "4",
      question: "‡§¶‡•Å‡§à ‡§Æ‡•Å‡§ñ ‡§õ, ‡§ö‡§æ‡§∞ ‡§ï‡§æ‡§®, ‡§¶‡§æ‡§Å‡§§ ‡§õ‡•à‡§®, ‡§ï‡•á ‡§π‡•ã‡§≤‡§æ?",
      options: ["‡§™‡§∂‡•Å", "‡§Æ‡§∏‡§æ‡§≤", "‡§™‡§ø‡§™‡§≤‡§ï‡•ã ‡§¨‡•ã‡§ü", "‡§ò‡§°‡•Ä"],
      answer: "‡§Æ‡§∏‡§æ‡§≤",
    },
    {
      id: "5",
      question: "‡§Ü‡§´‡•ç‡§®‡•ã ‡§∏‡§∞‡•á ‡§Ö‡§∞‡•ç‡§ï‡•ã‡§ï‡•ã ‡§™‡§∞‡•ç‚Äç‡§Ø‡•ã, ‡§ï‡•á ‡§π‡•ã‡§≤‡§æ?",
      options: ["‡§Æ‡§ï‡•à‡§ï‡•ã ‡§ò‡•ã‡§ó‡§æ", "‡§ü‡•ã‡§ï‡§∞‡•Ä", "‡§ò‡§£‡•ç‡§ü‡•Ä", "‡§ñ‡•á‡§§"],
      answer: "‡§Æ‡§ï‡•à‡§ï‡•ã ‡§ò‡•ã‡§ó‡§æ",
    },
  ];

  const [currentIndex, setCurrentIndex] = useState(0);
  const [score, setScore] = useState(0);

  const handleAnswer = (selectedOption) => {
    const currentRiddle = riddles[currentIndex];
    if (selectedOption === currentRiddle.answer) {
      setScore(score + 1);
      Alert.alert("‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞!", "‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡•á ‡§∏‡§π‡•Ä ‡§ú‡§µ‡§æ‡§´ ‡§¶‡§ø‡§®‡•Å‡§≠‡§Ø‡•ã‡•§ üéâ");
    } else {
      Alert.alert("‡§ó‡§≤‡§§ ‡§â‡§§‡•ç‡§§‡§∞!", `‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞: ${currentRiddle.answer}`);
    }

    // Move to the next question or end quiz
    if (currentIndex < riddles.length - 1) {
      setCurrentIndex(currentIndex + 1);
    } else {
      Alert.alert(
        "‡§ï‡•ç‡§µ‡§ø‡§ú ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§!",
        `‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§∏‡•ç‡§ï‡•ã‡§∞: ${score + (selectedOption === currentRiddle.answer ? 1 : 0)} / ${
          riddles.length
        }`
      );
      setCurrentIndex(0);
      setScore(0);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Gaau-Khane-Katha Quiz</Text>
      <Text style={styles.question}>
        Q: {riddles[currentIndex].question}
      </Text>
      <View style={styles.optionsContainer}>
        {riddles[currentIndex].options.map((option, index) => (
          <TouchableOpacity
            key={index}
            style={styles.optionButton}
            onPress={() => handleAnswer(option)}
          >
            <Text style={styles.optionText}>{option}</Text>
          </TouchableOpacity>
        ))}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#f9f9f9",
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 20,
  },
  question: {
    fontSize: 18,
    marginBottom: 20,
    textAlign: "center",
  },
  optionsContainer: {
    marginTop: 10,
  },
  optionButton: {
    backgroundColor: "#e6f7ff",
    padding: 15,
    marginVertical: 8,
    borderRadius: 10,
    borderColor: "#007acc",
    borderWidth: 1,
  },
  optionText: {
    fontSize: 16,
    textAlign: "center",
    color: "#333",
  },
});
